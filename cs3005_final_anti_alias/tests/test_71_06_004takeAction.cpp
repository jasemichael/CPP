#include "image_menu.h"
#include "image_menu.h" // Did you #ifndef your file?

#include "gtest/gtest.h"
#include <fstream>
#include <string>
const double ABS_ERROR = 0.00000001;

class AntiAliasTakeActionTest : public ::testing::Test {
protected:

  AntiAliasTakeActionTest( ) : ct( 5 ) { }

  virtual void writeFile( const std::string& filename, const PPM& ppm ) {
    std::ofstream fout( filename, std::ios::binary );
    fout << ppm;
    fout.close();
  }

  virtual void readFile( const std::string& filename, PPM& ppm ) {
    std::ifstream fin( filename, std::ios::binary );
    fin >> ppm;
    fin.close();
  }

  virtual void setup_original( ) {
    std::vector< int > data = {254,254,253,254,202,253,254,185,253,254,168,253,254,151,253,254,135,253,150,121,195,127,127,126,183,115,253,239,115,253,254,127,253,254,178,253,254,195,253,254,212,253,254,254,253,254,202,253,254,185,253,254,168,253,254,151,253,254,135,253,254,119,253,211,115,253,155,119,209,127,127,126,254,128,253,254,144,253,254,161,253,254,178,253,254,195,253,254,247,253,254,254,253,254,202,253,254,185,253,254,168,253,254,151,253,254,135,253,150,121,195,127,127,126,183,115,253,239,115,253,254,127,253,254,178,253,254,195,253,254,212,253,254,254,253,254,202,253,254,185,253,254,168,253,254,151,253,254,135,253,254,119,253,211,115,253,155,119,209,127,127,126,254,128,253,254,144,253,254,161,253,254,178,253,254,195,253,254,247,253,254,250,127,254,198,127,254,181,127,254,164,127,254,147,127,254,131,127,150,117,69,127,123,0,183,111,127,239,111,127,254,123,127,254,174,127,254,191,127,254,208,127,254,250,127,254,198,127,254,181,127,254,164,127,254,147,127,254,131,127,254,115,127,211,111,127,155,115,83,127,123,0,254,124,127,254,140,127,254,157,127,254,174,127,254,191,127,254,243,127,254,233,129,254,181,129,254,164,129,254,147,129,254,130,129,254,114,129,150,100,71,127,106,2,183,94,129,239,94,129,254,106,129,254,157,129,254,174,129,254,191,129,254,233,129,254,181,129,254,164,129,254,147,129,254,130,129,254,114,129,254,98,129,211,94,129,155,98,85,127,106,2,254,107,129,254,123,129,254,140,129,254,157,129,254,174,129,254,226,129,254,216,131,254,164,131,254,147,131,254,130,131,254,113,131,254,97,131,150,83,73,127,89,4,183,77,131,239,77,131,254,89,131,254,140,131,254,157,131,254,174,131,254,216,131,254,164,131,254,147,131,254,130,131,254,113,131,254,97,131,254,81,131,211,77,131,155,81,87,127,89,4,254,90,131,254,106,131,254,123,131,254,140,131,254,157,131,254,209,131,254,164,134,254,112,134,254,95,134,254,78,134,254,61,134,254,45,134,150,31,76,127,37,7,183,25,134,239,25,134,254,37,134,254,88,134,254,105,134,254,122,134,254,164,134,254,112,134,254,95,134,254,78,134,254,61,134,254,45,134,254,29,134,211,25,134,155,29,90,127,37,7,254,38,134,254,54,134,254,71,134,254,88,134,254,105,134,254,157,134,206,127,129,206,75,129,206,58,129,206,41,129,206,24,129,206,8,129,102,0,71,79,0,2,135,0,129,191,0,129,206,0,129,206,51,129,206,68,129,206,85,129,206,127,129,206,75,129,206,58,129,206,41,129,206,24,129,206,8,129,206,0,129,163,0,129,107,0,85,79,0,2,206,1,129,206,17,129,206,34,129,206,51,129,206,68,129,206,120,129,150,127,128,150,75,128,150,58,128,150,41,128,150,24,128,150,8,128,46,0,70,23,0,1,79,0,128,135,0,128,150,0,128,150,51,128,150,68,128,150,85,128,150,127,128,150,75,128,150,58,128,150,41,128,150,24,128,150,8,128,150,0,128,107,0,128,51,0,84,23,0,1,150,1,128,150,17,128,150,34,128,150,51,128,150,68,128,150,120,128,127,127,127,127,75,127,127,58,127,127,41,127,127,24,127,127,8,127,23,0,69,0,0,0,56,0,127,112,0,127,127,0,127,127,51,127,127,68,127,127,85,127,127,127,127,127,75,127,127,58,127,127,41,127,127,24,127,127,8,127,127,0,127,84,0,127,28,0,83,0,0,0,127,1,127,127,17,127,127,34,127,127,51,127,127,68,127,127,120,127,254,140,136,254,88,136,254,71,136,254,54,136,254,37,136,254,21,136,150,7,78,127,13,9,183,1,136,239,1,136,254,13,136,254,64,136,254,81,136,254,98,136,254,140,136,254,88,136,254,71,136,254,54,136,254,37,136,254,21,136,254,5,136,211,1,136,155,5,92,127,13,9,254,14,136,254,30,136,254,47,136,254,64,136,254,81,136,254,133,136,254,157,134,254,105,134,254,88,134,254,71,134,254,54,134,254,38,134,150,24,76,127,30,7,183,18,134,239,18,134,254,30,134,254,81,134,254,98,134,254,115,134,254,157,134,254,105,134,254,88,134,254,71,134,254,54,134,254,38,134,254,22,134,211,18,134,155,22,90,127,30,7,254,31,134,254,47,134,254,64,134,254,81,134,254,98,134,254,150,134,254,174,132,254,122,132,254,105,132,254,88,132,254,71,132,254,55,132,150,41,74,127,47,5,183,35,132,239,35,132,254,47,132,254,98,132,254,115,132,254,132,132,254,174,132,254,122,132,254,105,132,254,88,132,254,71,132,254,55,132,254,39,132,211,35,132,155,39,88,127,47,5,254,48,132,254,64,132,254,81,132,254,98,132,254,115,132,254,167,132,254,226,129,254,174,129,254,157,129,254,140,129,254,123,129,254,107,129,150,93,71,127,99,2,183,87,129,239,87,129,254,99,129,254,150,129,254,167,129,254,184,129,254,226,129,254,174,129,254,157,129,254,140,129,254,123,129,254,107,129,254,91,129,211,87,129,155,91,85,127,99,2,254,100,129,254,116,129,254,133,129,254,150,129,254,167,129,254,219,129,254,254,253,254,202,253,254,185,253,254,168,253,254,151,253,254,135,253,150,121,195,127,127,126,183,115,253,239,115,253,254,127,253,254,178,253,254,195,253,254,212,253,254,254,253,254,202,253,254,185,253,254,168,253,254,151,253,254,135,253,254,119,253,211,115,253,155,119,209,127,127,126,254,128,253,254,144,253,254,161,253,254,178,253,254,195,253,254,247,253,254,250,127,254,198,127,254,181,127,254,164,127,254,147,127,254,131,127,150,117,69,127,123,0,183,111,127,239,111,127,254,123,127,254,174,127,254,191,127,254,208,127,254,250,127,254,198,127,254,181,127,254,164,127,254,147,127,254,131,127,254,115,127,211,111,127,155,115,83,127,123,0,254,124,127,254,140,127,254,157,127,254,174,127,254,191,127,254,243,127,254,233,129,254,181,129,254,164,129,254,147,129,254,130,129,254,114,129,150,100,71,127,106,2,183,94,129,239,94,129,254,106,129,254,157,129,254,174,129,254,191,129,254,233,129,254,181,129,254,164,129,254,147,129,254,130,129,254,114,129,254,98,129,211,94,129,155,98,85,127,106,2,254,107,129,254,123,129,254,140,129,254,157,129,254,174,129,254,226,129,254,216,131,254,164,131,254,147,131,254,130,131,254,113,131,254,97,131,150,83,73,127,89,4,183,77,131,239,77,131,254,89,131,254,140,131,254,157,131,254,174,131,254,216,131,254,164,131,254,147,131,254,130,131,254,113,131,254,97,131,254,81,131,211,77,131,155,81,87,127,89,4,254,90,131,254,106,131,254,123,131,254,140,131,254,157,131,254,209,131,254,199,133,254,147,133,254,130,133,254,113,133,254,96,133,254,80,133,150,66,75,127,72,6,183,60,133,239,60,133,254,72,133,254,123,133,254,140,133,254,157,133,254,199,133,254,147,133,254,130,133,254,113,133,254,96,133,254,80,133,254,64,133,211,60,133,155,64,89,127,72,6,254,73,133,254,89,133,254,106,133,254,123,133,254,140,133,254,192,133,254,147,136,254,95,136,254,78,136,254,61,136,254,44,136,254,28,136,150,14,78,127,20,9,183,8,136,239,8,136,254,20,136,254,71,136,254,88,136,254,105,136,254,147,136,254,95,136,254,78,136,254,61,136,254,44,136,254,28,136,254,12,136,211,8,136,155,12,92,127,20,9,254,21,136,254,37,136,254,54,136,254,71,136,254,88,136,254,140,136,254,131,128,254,79,128,254,62,128,254,45,128,254,28,128,254,12,128,150,0,70,127,4,1,183,0,128,239,0,128,254,4,128,254,55,128,254,72,128,254,89,128,254,131,128,254,79,128,254,62,128,254,45,128,254,28,128,254,12,128,254,0,128,211,0,128,155,0,84,127,4,1,254,5,128,254,21,128,254,38,128,254,55,128,254,72,128,254,124,128};
    SetUpImageFromData( ppm_original, 30, 20, 255, data );
  }

  virtual void setup_expected( ) {
    std::vector< int > data = {254,179,178,190,110,141,254,180,178,254,155,178,200,109,144,254,172,178,198,75,130,134,9,93,198,76,130,198,51,130,144,7,96,198,68,130,254,150,155,190,80,118,254,151,155,254,126,155,200,79,120,254,143,155,254,123,131,190,54,94,254,124,131,254,99,131,200,53,97,254,116,131};
    SetUpImageFromData( ppm_expected, 6, 4, 255, data );
  }

  virtual void SetUpImageFromData( PPM& ppm, int width, int height, int max_color_value, const std::vector< int >& data ) {
    ppm.setWidth( width );
    ppm.setHeight( height );
    ppm.setMaxColorValue( max_color_value );
    size_t di;
    int row, column, channel;
    for( di = 0, row = 0; row < ppm.getHeight( ); row ++ ) {
      for( column = 0; column < ppm.getWidth( ); column ++ ) {
        for( channel = 0; channel < 3; channel++, di++ ) {
          ppm.setChannel( row, column, channel, data[ di ] );
        }
      }
    }
  }

  virtual void SetUp( ) {
    mExpected = "";
    mInputStream.str( "" );
    mOutputStream.str( "" );
    setup_original( );
    setup_expected( );
    ppm_actual.setWidth( 0 );
    ppm_actual.setHeight( 0 );
    ppm_actual.setMaxColorValue( 0 );
  }

  virtual void TearDown( ) {
    ppm_original.setWidth( 0 );
    ppm_original.setHeight( 0 );
    ppm_original.setMaxColorValue( 0 );
    ppm_expected.setWidth( 0 );
    ppm_expected.setHeight( 0 );
    ppm_expected.setMaxColorValue( 0 );
    ppm_actual.setWidth( 0 );
    ppm_actual.setHeight( 0 );
    ppm_actual.setMaxColorValue( 0 );
  }

  /* data members */
  std::string mChoice;
  std::string mExpected;
  std::stringstream mInputStream;
  std::stringstream mOutputStream;
  PPM ppm_original;
  PPM ppm_expected;
  PPM ppm_actual;
  PPM input_image2;
  JuliaSet grid;
  ColorTable ct;
};


TEST_F( AntiAliasTakeActionTest, reduces5 ) {

  /* Setup */
  mExpected = "Reduction count? ";
  mInputStream.str( "5" );
  mChoice = "anti-alias";

  /* Stimulus */
  takeAction( mInputStream, mOutputStream, mChoice, ppm_original, input_image2, ppm_actual, grid, ct );

  /* Comparison */
  // Grid should be updated
  EXPECT_EQ( mExpected, mOutputStream.str( ) );
  EXPECT_EQ( ppm_expected.getWidth( ), ppm_actual.getWidth( ) );
  EXPECT_EQ( ppm_expected.getHeight( ), ppm_actual.getHeight( ) );
  EXPECT_EQ( ppm_expected.getMaxColorValue( ), ppm_actual.getMaxColorValue( ) );

  int row, column, channel;
  for( row = 0; row < ppm_expected.getHeight( ); row++ ) {
    for( column = 0; column < ppm_expected.getWidth( ); column ++ ) {
      for( channel = 0; channel < 3; channel++ ) {
        EXPECT_EQ( ppm_expected.getChannel( row, column, channel ), ppm_actual.getChannel( row, column, channel ) )
          << "(row, column, channel) = ( " << row << ", " << column << ", " << channel << " )" << std::endl;
      }
    }
  }

  /* Tear-down */
  // Done automatically
}
